name: Build and Deploy Chrome Education Materials

on:
  push:
    branches: [main, master, dev]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wkhtmltopdf pandoc fonts-noto-cjk fonts-noto-cjk-extra
          sudo fc-cache -fv
          echo "✅ System dependencies installed"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-pptx pillow weasyprint markdown reportlab
          echo "✅ Python dependencies installed"

      - name: Create output directory
        run: |
          mkdir -p output
          echo "✅ Output directory created"

      - name: Generate education materials
        run: |
          echo "🚀 Starting material generation..."
          
          # 로컬 빌드와 동일한 방식으로 실행
          bash scripts/generate_materials.sh
          
          echo "✅ Material generation completed"

      - name: Verify generated files
        run: |
          echo "📋 Generated files verification:"
          echo "----------------------------------------"
          
          # 메인 인덱스 파일 확인
          if [ -f "output/index.html" ]; then
            size=$(stat -c%s "output/index.html")
            echo "✅ Main Index: $(printf "%'d" $size) bytes"
          else
            echo "❌ Main Index: Missing"
            exit 1
          fi
          
          # PowerPoint 파일 확인
          PPTX_FILE=$(find output -name "chrome_education_slides_*.pptx" | head -n 1)
          if [ -n "$PPTX_FILE" ]; then
            size=$(stat -c%s "$PPTX_FILE")
            mb=$(awk "BEGIN {printf \"%.1f\", $size / 1024 / 1024}")
            echo "✅ PowerPoint: $(printf "%'d" $size) bytes (${mb} MB)"
            echo "   File: $(basename "$PPTX_FILE")"
          else
            echo "⚠️ PowerPoint: Missing"
          fi
          
          # PDF 파일 확인
          PDF_FILE=$(find output -name "chrome_edu_workbook_*.pdf" | head -n 1)
          if [ -n "$PDF_FILE" ]; then
            size=$(stat -c%s "$PDF_FILE")
            kb=$(awk "BEGIN {printf \"%.1f\", $size / 1024}")
            echo "✅ PDF Workbook: $(printf "%'d" $size) bytes (${kb} KB)"
            echo "   File: $(basename "$PDF_FILE")"
          else
            echo "⚠️ PDF Workbook: Missing"
          fi
          
          # HTML 슬라이드 파일들 확인
          html_count=$(find output -name "[0-9][0-9]_*.html" | wc -l)
          echo "✅ HTML Slides: ${html_count} files"
          
          # build_info.json 확인
          if [ -f "output/build_info.json" ]; then
            echo "✅ Build Info: Available"
          else
            echo "⚠️ Build Info: Missing"
          fi
          
          echo "----------------------------------------"
          echo "📂 Complete file listing:"
          ls -la output/ | head -20
          
          if [ $(ls output/ | wc -l) -gt 20 ]; then
            echo "... and $(( $(ls output/ | wc -l) - 20 )) more files"
          fi

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './output'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev'

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Display deployment URL
        run: |
          echo "🌐 Deployment successful!"
          echo "📍 URL: ${{ steps.deployment.outputs.page_url }}"
          echo "🎯 Main page: ${{ steps.deployment.outputs.page_url }}"
          echo "📊 Slides: ${{ steps.deployment.outputs.page_url }}slides_index.html"

