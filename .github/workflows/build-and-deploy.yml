name: Build and Deploy Chrome Education Materials

on:
  push:
    branches: [main, master, dev, dev3]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wkhtmltopdf pandoc bc
          # 한글 폰트 설치 (PDF 한글 지원)
          sudo apt-get install -y fonts-noto-cjk fonts-noto-cjk-extra
          sudo fc-cache -fv
          echo "✅ System dependencies installed"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-pptx pillow weasyprint markdown reportlab
          echo "✅ Python dependencies installed"

      - name: Set build timestamp
        run: echo "TIMESTAMP=$(date '+%Y%m%d_%H%M')" >> $GITHUB_ENV

      - name: Create directories
        run: |
          mkdir -p output docs
          echo "✅ Directories created"

      - name: Generate materials
        run: |
          echo "🚀 Starting material generation..."

          # Python 스크립트 실행
          python scripts/generate_slides.py

          # Bash 스크립트 실행
          bash scripts/generate_materials.sh

          echo "✅ Material generation completed"

      - name: Verify generated files
        run: |
          echo "📋 Generated files verification:"
          echo "----------------------------------------"

          # 현재 날짜와 시간 형식의 타임스탬프
          TIMESTAMP=$(date +"%Y%m%d_%H%M")

          if [ -f "output/index.html" ]; then
            size=$(stat -c%s "output/index.html")
            echo "✅ HTML Index: $(printf "%'d" $size) bytes"
          else
            echo "❌ HTML Index: Missing"
          fi

          # PPTX 파일 확인 (타임스탬프 포함)
          PPTX_FILE=$(find output -name "chrome_education_slides_*.pptx" | head -n 1)
          if [ -n "$PPTX_FILE" ]; then
            size=$(stat -c%s "$PPTX_FILE")
            mb=$(echo "scale=1; $size / 1024 / 1024" | bc -l)
            echo "✅ PowerPoint: $(printf "%'d" $size) bytes (${mb} MB)"
            echo "   파일: $(basename "$PPTX_FILE")"
          else
            echo "❌ PowerPoint: Missing"
          fi

          # PDF 파일 확인 (타임스탬프 포함)
          PDF_FILE=$(find output -name "chrome_edu_workbook_*.pdf" | head -n 1)
          if [ -n "$PDF_FILE" ]; then
            size=$(stat -c%s "$PDF_FILE")
            kb=$(echo "scale=1; $size / 1024" | bc -l)
            echo "✅ PDF Workbook: $(printf "%'d" $size) bytes (${kb} KB)"
            echo "   파일: $(basename "$PDF_FILE")"
          else
            echo "⚠️ PDF Workbook: Missing (optional)"
          fi

          # HTML 슬라이드 파일들 개수
          html_count=$(find output -name "*.html" -not -name "index.html" | wc -l)
          echo "✅ HTML Slides: ${html_count} files"

          # Assets 확인
          if [ -d "output/assets" ]; then
            asset_count=$(find output/assets -type f | wc -l)
            echo "✅ Assets: ${asset_count} files"
          fi

          # 이미지 확인
          if [ -d "output/images" ]; then
            image_count=$(find output/images -type f | wc -l)
            echo "✅ Images: ${image_count} files"
          fi

          echo "----------------------------------------"
          echo "📂 Complete file listing:"
          ls -la output/

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './output'
          name: chrome-edu-materials-${{ env.TIMESTAMP }}

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    # 임시로 모든 브랜치에서 배포 허용 (테스트용)
    # if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
